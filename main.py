import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from PIL import Image
import tensorflow as tf
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier, RandomForestRegressor
from sklearn.svm import SVR
from sklearn.tree import DecisionTreeClassifier, DecisionTreeRegressor
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, log_loss, mean_absolute_error, r2_score


st.set_page_config(page_title="ML & Neural Network Analysis", layout="wide")
menu = {
    "Machine Learning ": "ml_explanation",
    "Machine Learning Model": "ml_analysis",
    "Neural Network": "nn_explanation",
    "Neural Network Model": "nn_image_analysis"
}

# ‚úÖ ‡πÉ‡∏ä‡πâ session_state ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
if "page" not in st.session_state:
    st.session_state["page"] = list(menu.values())[0]  # ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å‡πÄ‡∏õ‡πá‡∏ô default

st.sidebar.write("### ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏ô‡πâ‡∏≤")

# ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏ô‡πâ‡∏≤
for label, page in menu.items():
    if st.sidebar.button(label):
        st.session_state["page"] = page
        
if st.session_state["page"] == "ml_explanation":
    st.title("üìò Machine Learning ‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£?")
    st.write("""
             ## ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏´‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡πÇ‡∏•‡∏Å ‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å‡πÜ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®
                ‡πÑ‡∏î‡πâ‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏®‡∏ó‡∏≥‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì GDP ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÉ‡∏ô‡πÇ‡∏•‡∏Å ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Machine Learning ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÉ‡∏ô‡πÇ‡∏•‡∏Å 
             """)
    st.write("""
    ## ‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° Dataset
    ‡∏ú‡∏°‡πÑ‡∏î‡πâ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á Dataset ‡∏°‡∏≤‡∏à‡∏≤‡∏Å World Bank ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ï‡πà‡∏≤‡∏á ‡πÜ ‡πÉ‡∏ô‡πÇ‡∏•‡∏Å ‡πÇ‡∏î‡∏¢‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÄ‡∏ä‡πà‡∏ô GDP, Inflation Rate, GNI per capita, Unemployment Rate ‡πÅ‡∏•‡∏∞ Population
    link ‡∏Ç‡∏≠‡∏á Dataset: [link](https://datahelpdesk.worldbank.org/knowledgebase/articles/889392)
    
    ## Data Features
    - **Country**: ‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®
    - **GDP (USD)**: Gross Domestic Product (GDP) ‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®
    - **Year**: ‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    - **Inflation Rate (%)**: ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏ü‡πâ‡∏≠
    - **GNI per capita (USD)**: Gross National Income (GNI) ‡∏ï‡πà‡∏≠‡∏Ñ‡∏ô
    - **Unemployment Rate (%)**: ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏ß‡πà‡∏≤‡∏á‡∏á‡∏≤‡∏ô
    - **Population**: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏Å‡∏£
    
    ## Model ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
    - **Classification**: ‡πÉ‡∏ä‡πâ Decision Tree ‡πÅ‡∏•‡∏∞ Random Forest
    - **Regression**: ‡πÉ‡∏ä‡πâ Decision Tree ‡πÅ‡∏•‡∏∞ Random Forest
    
    ## Classification Decision Tree
    (‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó)
    ‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÇ‡∏î‡∏¢‡∏≠‡∏≤‡∏®‡∏±‡∏¢‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏é‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏¢‡πà‡∏≠‡∏¢‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏à‡∏ô‡πÑ‡∏î‡πâ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢

    - ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥‡πÜ ‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î (‡πÄ‡∏ä‡πà‡∏ô Gini Index ‡∏´‡∏£‡∏∑‡∏≠ Entropy)
    - ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ú‡∏ô‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡πÑ‡∏î‡πâ
    - ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‡πÅ‡∏ï‡πà‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÄ‡∏Å‡∏¥‡∏î Overfitting ‡πÑ‡∏î‡πâ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏•‡∏∂‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
    
    ## Classification Random Forest
    (‡∏õ‡πà‡∏≤‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó)
    ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ ‡∏´‡∏•‡∏≤‡∏¢‡πÜ ‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à (Decision Trees) ‡∏°‡∏≤‡∏ä‡πà‡∏ß‡∏¢‡∏Å‡∏±‡∏ô‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏• ‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°‡∏ú‡∏•‡∏à‡∏≤‡∏Å‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î

    - ‡πÉ‡∏ä‡πâ‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£ Bootstrap Aggregation (Bagging) ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡πâ‡∏ô‡∏à‡∏≤‡∏Å‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏∏‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤
    - ‡∏•‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤ Overfitting ‡∏ó‡∏µ‡πà‡∏°‡∏±‡∏Å‡πÄ‡∏Å‡∏¥‡∏î‡∏Å‡∏±‡∏ö Decision Tree ‡πÑ‡∏î‡πâ‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô
    - ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏ï‡πâ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡πÅ‡∏ï‡πà‡∏ï‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÑ‡∏î‡πâ‡∏¢‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤
    
    ## Regression Decision Tree
    (‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á)
    ‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡πà‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°

    - ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡∏•‡∏î‡∏Ñ‡πà‡∏≤ Mean Squared Error (MSE) ‡∏´‡∏£‡∏∑‡∏≠ Variance Reduction ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
    - ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢ ‡πÅ‡∏ï‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ï‡πà‡∏≠ Overfitting ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
    - ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡πÄ‡∏ä‡∏¥‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡πÄ‡∏ä‡πà‡∏ô ‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏£‡∏≤‡∏Ñ‡∏≤, ‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥ ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏ô
    
    ## Regression Random Forest
    (‡∏õ‡πà‡∏≤‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á)
    ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡πâ‡∏ô‡∏°‡∏≤‡∏ä‡πà‡∏ß‡∏¢‡∏Å‡∏±‡∏ô‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏Ñ‡πà‡∏≤‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏à‡∏≤‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Ç‡∏≠‡∏á‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡πâ‡∏ô

    - ‡πÉ‡∏ä‡πâ‡πÅ‡∏ô‡∏ß‡∏Ñ‡∏¥‡∏î Bagging ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏∏‡πà‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡πâ‡∏ô
    - ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÅ‡∏•‡∏∞‡∏•‡∏î Overfitting ‡πÑ‡∏î‡πâ‡∏î‡∏µ
    - ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πà‡∏≤‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥ ‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢, ‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏ï‡∏•‡∏≤‡∏î ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏ô
    
    
    ## ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    ‡∏ú‡∏°‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ import ‡πÑ‡∏ü‡∏•‡πå csv ‡πÅ‡∏•‡∏∞‡πÑ‡∏î‡πâ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏à‡∏±‡∏î missing values ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏°‡∏±‡∏ò‡∏¢‡∏ê‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 50% ‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏™‡∏ô‡πÉ‡∏à‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
    ```python
            file_path = "./dataset/world_bank_dataset.csv"
            df = pd.read_csv(file_path)

            threshold = len(df.columns) // 2
            df = df.dropna(thresh=threshold)
            

            selected_cols = ["Country", "GDP (USD)", "Year", "Inflation Rate (%)", "GNI per capita (USD)", "Unemployment Rate (%)", "Population"]
            df = df[selected_cols]
            for col in selected_cols[1:]: 
                df[col] = df[col].fillna(df[col].median())
    ```
    
    ## ‡πÉ‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡∏°‡∏≤
    ‡∏ú‡∏°‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô train ‡πÅ‡∏•‡∏∞ test set ‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Decision Tree ‡πÅ‡∏•‡∏∞ Random Forest ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥ Classification
    ‡∏ã‡∏∂‡πà‡∏á‡πÉ‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡∏°‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£ ‡πÄ‡∏ó‡∏£‡∏ô‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î Classification ‡∏°‡∏µ 2 ‡πÇ‡∏°‡πÄ‡∏î‡∏• ‡∏Ñ‡∏∑‡∏≠ Decision Tree ‡πÅ‡∏•‡∏∞ Random Forest
    
    ## ‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏ô Decision Tree ‡πÅ‡∏•‡∏∞ Random Forest ‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î Classification
    
    Decision Tree ‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏Ç‡∏≠‡∏á Classification 
    - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡∏°‡πà‡∏ä‡∏∑‡πà‡∏≠ "GDP_Class" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô label ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
    - ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏°‡∏±‡∏ò‡∏¢‡∏ê‡∏≤‡∏ô (median) ‡∏Ç‡∏≠‡∏á GDP (USD) ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡πà‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô 2 ‡∏Å‡∏•‡∏∏‡πà‡∏°
        - ‡∏Ñ‡πà‡∏≤ GDP ‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏°‡∏±‡∏ò‡∏¢‡∏ê‡∏≤‡∏ô ‚Üí 1 (‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ GDP ‡∏™‡∏π‡∏á)
        - ‡∏Ñ‡πà‡∏≤ GDP ‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡∏°‡∏±‡∏ò‡∏¢‡∏ê‡∏≤‡∏ô ‚Üí 0 (‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ GDP ‡∏ï‡πà‡∏≥)
    - astype(int) ‡πÉ‡∏ä‡πâ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å True/False ‡πÄ‡∏õ‡πá‡∏ô 1/0 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏Å‡∏±‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•
    - X (Feature) ‚Üí ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå "Country", "GDP (USD)", ‡πÅ‡∏•‡∏∞ "GDP_Class")
    - y (Target/Label) ‚Üí ‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ ‡∏Ñ‡∏∑‡∏≠ "GDP_Class"
    - train_test_split() ‡πÉ‡∏ä‡πâ‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô 2 ‡∏™‡πà‡∏ß‡∏ô
    - X_train, y_train ‚Üí ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• (80% ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)
    - X_test, y_test ‚Üí ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏• (20% ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)
    - random_state=42 ‡πÉ‡∏ä‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ seed ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ô
    ```python
    df["GDP_Class"] = (df["GDP (USD)"] > df["GDP (USD)"].median()).astype(int)

        X = df.drop(columns=["Country", "GDP (USD)", "GDP_Class"])
        y = df["GDP_Class"]
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

        if model_option == "Decision Tree":
            max_depth = st.slider("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∂‡∏Å‡∏Ç‡∏≠‡∏á‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ (max_depth)", 1, 10, 3)
            model = DecisionTreeClassifier()
    ```
    
    **Random Forest ‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏Ç‡∏≠‡∏á Classification**
    
     RandomForestClassifier(n_estimators=n_estimators) ‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏• Random Forest ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ ‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à (Decision Trees) ‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡πâ‡∏ô ‡∏°‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏ß‡∏¢‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•

    - ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏à‡∏≤‡∏Å ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏∏‡πà‡∏°‡∏°‡∏≤
    - ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏• ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÉ‡∏´‡πâ‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏ó‡∏∏‡∏Å‡∏ï‡πâ‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡∏Å‡∏±‡∏ô‡πÇ‡∏´‡∏ß‡∏ï ‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Ç‡πâ‡∏≤‡∏á‡∏°‡∏≤‡∏Å
    - ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡πâ‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏• ‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ç‡∏∂‡πâ‡∏ô ‡πÅ‡∏•‡∏∞‡∏•‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤ Overfitting
    
    üîπ n_estimators ‡∏Ñ‡∏∑‡∏≠‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ
    - ‡∏ñ‡πâ‡∏≤‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‚Üí ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£
    - ‡∏ñ‡πâ‡∏≤‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‚Üí ‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ç‡∏∂‡πâ‡∏ô ‡πÅ‡∏ï‡πà‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
    - ‡∏Ñ‡πà‡∏≤‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà 100-200 ‡∏ï‡πâ‡∏ô ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
    
    ‚úÖ ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏™‡∏π‡∏á ‡πÅ‡∏•‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏≠‡∏á Decision Tree ‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß
    
    ```python
            model = RandomForestClassifier(n_estimators=n_estimators)
    ```
    
    ‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏ô Model ‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏Ç‡∏≠‡∏á Classification ‡∏Ç‡∏≠‡∏á Model ‡∏ó‡∏±‡πâ‡∏á 2 ‡πÇ‡∏°‡πÄ‡∏î‡∏• ‡∏Ñ‡∏∑‡∏≠ Decision Tree ‡πÅ‡∏•‡∏∞ Random Forest
    
    **Performance Metrics**
    
    - Accuracy üéØ	‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•
    - Precision ‚ö°	‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡∏Ñ‡∏•‡∏≤‡∏™‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡πÅ‡∏Ñ‡πà‡πÑ‡∏´‡∏ô
    - Recall üîÑ	‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡πÑ‡∏î‡πâ‡∏î‡∏µ‡πÅ‡∏Ñ‡πà‡πÑ‡∏´‡∏ô
    - F1-score ‚≠ê	‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡∏≠‡∏á Precision ‡πÅ‡∏•‡∏∞ Recall (‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏™‡∏°‡∏î‡∏∏‡∏•)
    - Log Loss üìâ	‡πÉ‡∏ä‡πâ‡∏ß‡∏±‡∏î‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• (‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡∏î‡∏µ)
    
    **‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏£‡∏≤‡∏ü:**
    
    - ‡πÉ‡∏ä‡πâ Matplotlib ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ñ‡πà‡∏≤ Accuracy, Precision, Recall ‡πÅ‡∏•‡∏∞ F1-score
    - ‡∏Å‡∏≥‡∏´‡∏ô‡∏î ‡πÅ‡∏Å‡∏ô y (0 - 1) ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á Metrics ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ô‡∏µ‡πâ
    
    ```python
        model.fit(X_train, y_train)
        y_pred = model.predict(X_test)

        acc = accuracy_score(y_test, y_pred)
        prec = precision_score(y_test, y_pred)
        recall = recall_score(y_test, y_pred)
        f1 = f1_score(y_test, y_pred)
        loss = log_loss(y_test, y_pred)

        st.write("### üìà ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• Classification")
        col1, col2, col3, col4, col5 = st.columns(5)
        col1.metric("üéØ Accuracy", f"{acc:.2f}")
        col2.metric("‚ö° Precision", f"{prec:.2f}")
        col3.metric("üîÑ Recall", f"{recall:.2f}")
        col4.metric("‚≠ê F1-score", f"{f1:.2f}")
        col5.metric("üìâ Log Loss", f"{loss:.2f}")

        fig, ax = plt.subplots()
        ax.bar(["Accuracy", "Precision", "Recall", "F1-score"], [acc, prec, recall, f1])
        ax.set_ylim(0, 1)
        ax.set_title("Classification Performance Metrics")
        st.pyplot(fig)
    ```
    
    ## ‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏ô Decision Tree ‡πÅ‡∏•‡∏∞ Random Forest ‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î Regression
    
    **Decision Tree ‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏Ç‡∏≠‡∏á Regression**
    
   - X (Feature) ‚Üí ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô "Country", "GDP (USD)", "GNI per capita (USD)")
    - y (Target/Label) ‚Üí ‡∏Ñ‡πà‡∏≤ GDP (USD) ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå
    
    **üîπ ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏±‡∏î GDP (USD) ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å X**
    - ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ GDP (USD) ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå ‡∏´‡∏≤‡∏Å‡πÉ‡∏™‡πà‡πÑ‡∏ß‡πâ‡πÉ‡∏ô X ‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏°‡∏≠‡∏á‡πÄ‡∏´‡πá‡∏ô‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤
    
    
    - ‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô 80% ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Train ‡πÅ‡∏•‡∏∞ 20% ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Test
    - random_state=42 ‚Üí ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ Seed ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ô
    ```python
     X = df.drop(columns=["Country", "GDP (USD)", "GNI per capita (USD)"])
        y = df["GDP (USD)"]
        
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
        

        if model_option == "Decision Tree":
            max_depth = st.slider("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∂‡∏Å‡∏Ç‡∏≠‡∏á‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ (max_depth)", 5, 100, 5)
            model = DecisionTreeRegressor(max_depth=max_depth)
    ```
    
    **Random Forest ‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏Ç‡∏≠‡∏á Regression**
    
    RandomForestRegressor(n_estimators=n_estimators, random_state=42) ‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏• Random Forest ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏Ñ‡πà‡∏≤ (Regression) ‡∏ã‡∏∂‡πà‡∏á‡πÉ‡∏ä‡πâ ‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à (Decision Trees) ‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡πâ‡∏ô ‡∏°‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç

    üîπ ‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô

    - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡πâ‡∏ô (Decision Trees) ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏∏‡πà‡∏°‡∏°‡∏≤
    - ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏à‡∏∞‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ñ‡πà‡∏≤‡πÅ‡∏¢‡∏Å‡∏Å‡∏±‡∏ô
    - ‡∏ô‡∏≥‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏ó‡∏∏‡∏Å‡∏ï‡πâ‡∏ô‡∏°‡∏≤‡∏´‡∏≤‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ç‡∏∂‡πâ‡∏ô
    
    üîπ n_estimators ‡∏Ñ‡∏∑‡∏≠‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ
    - ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ ‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‚Üí ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏ô‡∏¥‡πà‡∏á (‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏≤‡∏à‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡∏™‡∏π‡∏á)
    - ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ ‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‚Üí ‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ç‡∏∂‡πâ‡∏ô ‡πÅ‡∏ï‡πà‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
    - ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ô‡∏¥‡∏¢‡∏°‡πÉ‡∏ä‡πâ‡∏Ñ‡∏∑‡∏≠ 100-200 ‡∏ï‡πâ‡∏ô
    üîπ random_state=42 ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ô

    ‚úÖ ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢, ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ö‡πâ‡∏≤‡∏ô, ‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡πÄ‡∏®‡∏£‡∏©‡∏ê‡∏Å‡∏¥‡∏à üöÄ

    ```python
            model = RandomForestClassifier(n_estimators=n_estimators)
    ```
    
    ‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏ô Model ‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏Ç‡∏≠‡∏á Regression ‡∏Ç‡∏≠‡∏á Model ‡∏ó‡∏±‡πâ‡∏á 2 ‡πÇ‡∏°‡πÄ‡∏î‡∏• ‡∏Ñ‡∏∑‡∏≠ Decision Tree ‡πÅ‡∏•‡∏∞ Random Forest
    
    **Performance Metrics**
    
    - MAE (Mean Absolute Error) üìâ	‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏•‡∏≤‡∏î‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏£‡∏¥‡∏á (y_test) ‡∏Å‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå (y_pred) ‡∏¢‡∏¥‡πà‡∏á‡∏ï‡πà‡∏≥‡∏¢‡∏¥‡πà‡∏á‡∏î‡∏µ
    - R¬≤ Score üìä	‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ‡∏î‡∏µ‡πÅ‡∏Ñ‡πà‡πÑ‡∏´‡∏ô ‡∏Ñ‡πà‡∏≤‡∏¢‡∏¥‡πà‡∏á‡πÉ‡∏Å‡∏•‡πâ 1 ‡∏¢‡∏¥‡πà‡∏á‡∏î‡∏µ
    
    **‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏£‡∏≤‡∏ü:**

    - ‡πÉ‡∏ä‡πâ scatter plot ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏£‡∏¥‡∏á (y_test) ‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå (y_pred)
    - ‡πÄ‡∏™‡πâ‡∏ô‡∏õ‡∏£‡∏∞ (r--) ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á (‡πÄ‡∏™‡πâ‡∏ô‡∏ï‡∏£‡∏á‡∏ñ‡πâ‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡πÑ‡∏î‡πâ‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡πÅ‡∏ö‡∏ö ‡∏ó‡∏∏‡∏Å‡∏à‡∏∏‡∏î‡∏Ñ‡∏ß‡∏£‡∏≠‡∏¢‡∏π‡πà‡∏ö‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ô‡∏µ‡πâ)
    - ‡∏ñ‡πâ‡∏≤‡∏à‡∏∏‡∏î‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏™‡πâ‡∏ô ‚Üí ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥
    - ‡∏ñ‡πâ‡∏≤‡∏à‡∏∏‡∏î‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏™‡πâ‡∏ô ‚Üí ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏°‡∏≤‡∏Å

    ```python
        model.fit(X_train, y_train)
        y_pred = model.predict(X_test)

        mae = mean_absolute_error(y_test, y_pred)
        r2 = r2_score(y_test, y_pred)

        st.write("### üìä ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• Regression")
        col1, col2 = st.columns(2)
        col1.metric("üìâ MAE", f"{mae:.2f}")
        col2.metric("üìä R¬≤ Score", f"{r2:.2f}")

        fig, ax = plt.subplots()
        ax.scatter(y_test, y_pred, alpha=0.5, label="Actual vs Predicted")
        ax.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], 'r--')  # ‡πÄ‡∏™‡πâ‡∏ô‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á
        ax.set_xlabel("Actual GDP (USD)")
        ax.set_ylabel("Predicted GDP (USD)")
        ax.set_title("Regression Prediction Performance")
        ax.legend()
        st.pyplot(fig)
    ```

    
    """)

elif st.session_state["page"] == "ml_analysis":
    file_path = "./dataset/world_bank_dataset.csv"
    df = pd.read_csv(file_path)

    threshold = len(df.columns) // 2
    df = df.dropna(thresh=threshold)
    

    selected_cols = ["Country", "GDP (USD)", "Year", "Inflation Rate (%)", "GNI per capita (USD)", "Unemployment Rate (%)", "Population"]
    df = df[selected_cols]
    for col in selected_cols[1:]: 
        df[col] = df[col].fillna(df[col].median())
    st.title("üìä ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡πÇ‡∏•‡∏Å‡πÇ‡∏î‡∏¢ Machine Learning")
    st.write("### üîπ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô")
    st.dataframe(df)
    problem_type = st.radio("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•", ["Classification", "Regression"])
    if problem_type == "Classification":
        df["GDP_Class"] = (df["GDP (USD)"] > df["GDP (USD)"].median()).astype(int)

        X = df.drop(columns=["Country", "GDP (USD)", "GDP_Class"])
        y = df["GDP_Class"]
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
        
        model_option = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• Classification", ["Decision Tree", "Random Forest"])

        if model_option == "Decision Tree":
            max_depth = st.slider("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∂‡∏Å‡∏Ç‡∏≠‡∏á‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ (max_depth)", 1, 10, 3)
            model = DecisionTreeClassifier()
        else:
            n_estimators = st.slider("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ (n_estimators)", 10, 200, 100)
            model = RandomForestClassifier(n_estimators=n_estimators)

        model.fit(X_train, y_train)
        y_pred = model.predict(X_test)

        acc = accuracy_score(y_test, y_pred)
        prec = precision_score(y_test, y_pred)
        recall = recall_score(y_test, y_pred)
        f1 = f1_score(y_test, y_pred)
        loss = log_loss(y_test, y_pred)

        st.write("### üìà ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• Classification")
        col1, col2, col3, col4, col5 = st.columns(5)
        col1.metric("üéØ Accuracy", f"{acc:.2f}")
        col2.metric("‚ö° Precision", f"{prec:.2f}")
        col3.metric("üîÑ Recall", f"{recall:.2f}")
        col4.metric("‚≠ê F1-score", f"{f1:.2f}")
        col5.metric("üìâ Log Loss", f"{loss:.2f}")

        fig, ax = plt.subplots()
        ax.bar(["Accuracy", "Precision", "Recall", "F1-score"], [acc, prec, recall, f1])
        ax.set_ylim(0, 1)
        ax.set_title("Classification Performance Metrics")
        st.pyplot(fig)
        
        
    else:
        X = df.drop(columns=["Country", "GDP (USD)", "GNI per capita (USD)"])
        y = df["GDP (USD)"]
        
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
        
        model_option = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• Regression", ["Decision Tree", "Random Forest"])

        if model_option == "Decision Tree":
            max_depth = st.slider("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∂‡∏Å‡∏Ç‡∏≠‡∏á‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ (max_depth)", 5, 100, 5)
            model = DecisionTreeRegressor(max_depth=max_depth)
        else:
            n_estimators = st.slider("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ (n_estimators)", 1, 20, 5)
            model = RandomForestRegressor(n_estimators=n_estimators, random_state=42)

        model.fit(X_train, y_train)
        y_pred = model.predict(X_test)

        mae = mean_absolute_error(y_test, y_pred)
        r2 = r2_score(y_test, y_pred)

        st.write("### üìä ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• Regression")
        col1, col2 = st.columns(2)
        col1.metric("üìâ MAE", f"{mae:.2f}")
        col2.metric("üìä R¬≤ Score", f"{r2:.2f}")

        fig, ax = plt.subplots()
        ax.scatter(y_test, y_pred, alpha=0.5, label="Actual vs Predicted")
        ax.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], 'r--')  # ‡πÄ‡∏™‡πâ‡∏ô‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á
        ax.set_xlabel("Actual GDP (USD)")
        ax.set_ylabel("Predicted GDP (USD)")
        ax.set_title("Regression Prediction Performance")
        ax.legend()
        st.pyplot(fig)
elif st.session_state["page"] == "nn_explanation":
    st.title("‡πÅ‡∏¢‡∏Å‡πÇ‡∏ö‡πÇ‡∏≠‡∏°‡πÉ‡∏ô Minecraft ‡∏î‡πâ‡∏ß‡∏¢ Neural Network CNN")
    st.write("""
        ‡∏ú‡∏°‡∏ó‡∏≥‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Neural Network ‡πÅ‡∏ö‡∏ö CNN (Convolutional Neural Network) ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
        ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÄ‡∏Å‡∏° Minecraft ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡πÇ‡∏ö‡πÇ‡∏≠‡∏°‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÅ‡∏¢‡∏Å‡πÇ‡∏ö‡πÇ‡∏≠‡∏°‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û 
        ‡∏ß‡πà‡∏≤‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ö‡πÇ‡∏≠‡∏°‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏• Neural Network CNN ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÇ‡∏ö‡πÇ‡∏≠‡∏°‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡∏ô‡∏¥‡∏î
        
        ### ‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Ç‡∏≠‡∏á Dataset
        ‡∏ú‡∏°‡πÑ‡∏î‡πâ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Dataset ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏Ç‡∏≠‡∏á‡πÄ‡∏Å‡∏° Minecraft ‡πÉ‡∏ô kaggle ‡∏ã‡∏∂‡πà‡∏á‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡πÇ‡∏ö‡πÇ‡∏≠‡∏°‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏ó‡∏µ‡πà‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡πÜ‡∏Å‡∏±‡∏ô‡πÄ‡∏¢‡∏≠‡∏∞‡∏°‡∏≤‡∏Å
        
        ‡∏ó‡∏µ‡πà‡∏°‡∏≤ : [link](https://www.kaggle.com/datasets/willowc/minecraft-biomes)
        
        ### Data Features
        ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏≠‡∏î‡∏µ‡∏Ç‡∏≠‡∏á‡πÇ‡∏ö‡πÇ‡∏≠‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        
        biome_10, biome_24, biome_0, biome_46, biome_47, biome_44, biome_45, biome_42, biome_43, biome_40, biome_41, biome_7, biome_11, biome_16, biome_25, biome_26, biome_4, biome_18, biome_132, biome_27, biome_28, biome_155, biome_156, biome_29, biome_157, biome_193, biome_21, biome_22, biome_149, biome_23, biome_151, biome_48, biome_49, biome_5, biome_19, biome_133, biome_30, biome_31, biome_158, biome_32, biome_33, biome_160, biome_161, biome_14, biome_15, biome_6, biome_134, biome_191, biome_35, biome_36, biome_163, biome_164, biome_1, biome_129, biome_2, biome_17, biome_130, biome_12, biome_13, biome_140, biome_3, biome_34, biome_131, biome_162, biome_20, biome_37, biome_39, biome_167, biome_38, biome_166, biome_165, biome_186, biome_192, biome_185, biome_184, biome_182, biome_183, biome_189, biome_187, biome_188, biome_190, biome_8, biome_179, biome_180, biome_178, biome_181, biome_9

        ## **üìå ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• (Training Process)**
        ‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ Convolutional Neural Network (CNN) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û ‡πÇ‡∏î‡∏¢‡∏°‡∏µ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ

        **1Ô∏è‚É£ ‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Dataset Preparation)**
        - ‡πÇ‡∏´‡∏•‡∏î‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏û‡∏ù‡∏∂‡∏Å (train_ds) ‡πÅ‡∏•‡∏∞‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö (val_ds)
        - ‡πÉ‡∏ä‡πâ image_dataset_from_directory() ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå dataset/train ‡πÅ‡∏•‡∏∞ dataset/validation
        - ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û (IMG_SIZE = (128, 128)) ‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (BATCH_SIZE = 128)
        ```python
        train_ds = tf.keras.utils.image_dataset_from_directory(
            "./dataset/train",
            image_size=IMG_SIZE,
            batch_size=BATCH_SIZE
        )

        val_ds = tf.keras.utils.image_dataset_from_directory(
            "./dataset/validation",
            image_size=IMG_SIZE,
            batch_size=BATCH_SIZE
        )
        ```
        
        
       ** 2Ô∏è‚É£ ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• (Model Architecture)**
        ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ CNN (Convolutional Neural Network) ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:

        - Rescaling ‚Üí ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏¥‡∏Å‡πÄ‡∏ã‡∏•‡∏à‡∏≤‡∏Å [0, 255] ‡πÄ‡∏õ‡πá‡∏ô [0, 1] ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Ç‡∏∂‡πâ‡∏ô
        - Conv2D + ReLU Activation + BatchNormalization
            - ‡πÉ‡∏ä‡πâ 3 ‡∏ä‡∏±‡πâ‡∏ô Conv2D ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡πÄ‡∏î‡πà‡∏ô‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏û
            - ‡πÉ‡∏ä‡πâ BatchNormalization() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤ vanishing gradient
            - ‡πÉ‡∏ä‡πâ MaxPooling2D() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå
        - GlobalAveragePooling2D ‚Üí ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö Fully Connected Layer
        - Dense Layers
            - ‡∏ä‡∏±‡πâ‡∏ô Dense(128, activation='relu') ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥
            - ‡∏ä‡∏±‡πâ‡∏ô Dropout(0.5) ‡∏•‡∏î‡πÇ‡∏≠‡∏Å‡∏≤‡∏™ overfitting
            - ‡∏ä‡∏±‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ Dense(len(train_ds.class_names), activation='softmax') ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
        ```python
        model = models.Sequential([
            layers.Rescaling(1./255, input_shape=(128, 128, 3)),
            layers.Conv2D(32, (3, 3), activation='relu', padding="same"),
            layers.BatchNormalization(),
            layers.MaxPooling2D((2, 2)),
            layers.Conv2D(64, (3, 3), activation='relu', padding="same"),
            layers.BatchNormalization(),
            layers.MaxPooling2D((2, 2)),
            layers.Conv2D(128, (3, 3), activation='relu', padding="same"),
            layers.BatchNormalization(),
            layers.MaxPooling2D((2, 2)),
            layers.GlobalAveragePooling2D(),
            layers.Dense(128, activation='relu'),
            layers.Dropout(0.5),
            layers.Dense(len(train_ds.class_names), activation='softmax') 
        ])
        ```
        
        **3Ô∏è‚É£ ‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Data Augmentation)**
        - ‡πÉ‡∏ä‡πâ RandomFlip, RandomRotation, ‡πÅ‡∏•‡∏∞ RandomZoom ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        - ‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô
        
        ```python
        data_augmentation = tf.keras.Sequential([
            layers.RandomFlip("horizontal"),
            layers.RandomRotation(0.2),
            layers.RandomZoom(0.2),
        ])
        ```
        
        - ‡∏ô‡∏≥ augmentation ‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö‡∏ä‡∏∏‡∏î‡∏ù‡∏∂‡∏Å (train_ds)

        ```python
        train_ds = train_ds.map(lambda x, y: (data_augmentation(x, training=True), y))
        ```
        
       ** 4Ô∏è‚É£ ‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î Optimizer ‡πÅ‡∏•‡∏∞ Learning Rate Schedule**
        - ‡πÉ‡∏ä‡πâ Adam Optimizer ‡∏û‡∏£‡πâ‡∏≠‡∏° Learning Rate 0.0005
        - ‡πÉ‡∏ä‡πâ ReduceLROnPlateau ‡∏•‡∏î‡∏Ñ‡πà‡∏≤ learning rate ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏´‡∏≤‡∏Å val_loss ‡πÑ‡∏°‡πà‡∏•‡∏î‡∏•‡∏á
        
        ```python
        lr_scheduler = tf.keras.callbacks.ReduceLROnPlateau(
            monitor='val_loss', factor=0.5, patience=3, min_lr=1e-6
        )

        optimizer = Adam(learning_rate=0.0005) 
        ```
        
        **5Ô∏è‚É£ ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≠‡∏°‡πÑ‡∏û‡∏•‡πå‡πÅ‡∏•‡∏∞‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•**
        - ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Sparse Categorical Crossentropy ‡πÄ‡∏õ‡πá‡∏ô loss function
        - ‡πÉ‡∏ä‡πâ Accuracy ‡πÄ‡∏õ‡πá‡∏ô metric
        
        ```python
        model.compile(
            optimizer=optimizer,
            loss='sparse_categorical_crossentropy',
            metrics=['accuracy']
        )
        ```
        - ‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 30 epochs
        ```python
        history = model.fit(train_ds, validation_data=val_ds, epochs=30)
        ```
        **6Ô∏è‚É£ ‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•**
        - ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏ù‡∏∂‡∏Å‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå .h5 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á
        
        ```python
        model.save("ibome_model.h5")
        ```
        
        **7Ô∏è‚É£ ‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå**
        ‡πÉ‡∏ä‡πâ Matplotlib ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü Accuracy ‡∏Ç‡∏≠‡∏á Training ‡πÅ‡∏•‡∏∞ Validation
        
        ```python
        plt.plot(history.history['accuracy'], label='accuracy')
        plt.plot(history.history['val_accuracy'], label='val_accuracy')
        plt.xlabel('Epoch')
        plt.ylabel('Accuracy')
        plt.legend()
        plt.show()
        ```
        
        ## **üìå ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡πÅ‡∏¢‡∏Å‡πÑ‡∏ö‡πÇ‡∏≠‡∏°‡πÉ‡∏ô Minecraft ‡∏î‡πâ‡∏ß‡∏¢ CNN**
        ‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô Streamlit Web App ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ ‡πÅ‡∏¢‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ö‡πÇ‡∏≠‡∏° (Biomes) ‡πÉ‡∏ô‡πÄ‡∏Å‡∏° Minecraft ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏• Neural Network CNN ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÑ‡∏ö‡πÇ‡∏≠‡∏°‡∏à‡∏≤‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î

        **1Ô∏è‚É£ ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î**
        - ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û `(st.file_uploader())`
        - ‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û`(st.image())`
        
        ```python
        uploaded_file = st.file_uploader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û", type=["jpg", "png", "jpeg", "webp"])
        

        if uploaded_file is not None:
            image = Image.open(uploaded_file)
            st.image(image, caption="‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î", use_column_width=True)
            
        ```
        **2Ô∏è‚É£ ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• Neural Network**
        - ‡πÉ‡∏ä‡πâ st.cache_resource ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
        - ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ù‡∏∂‡∏Å‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß (minecraft.h5)
        
        ```python
        @st.cache_resource
        def load_model():
            model = tf.keras.models.load_model("./dataset/minecraft.h5")
            return model

        model = load_model()
        ```
        **3Ô∏è‚É£ ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÑ‡∏î‡πâ**
        - ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏†‡∏≤‡∏û‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏≤‡πÄ‡∏£‡∏¢‡πå (tf.keras.preprocessing.image.img_to_array())
        - ‡∏Ç‡∏¢‡∏≤‡∏¢‡∏°‡∏¥‡∏ï‡∏¥‡∏†‡∏≤‡∏û ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô batch
        
        ```python
        image_array = tf.keras.preprocessing.image.img_to_array(image)
        image_array = tf.expand_dims(image_array, 0)
        ```
        
        **4Ô∏è‚É£ ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÑ‡∏ö‡πÇ‡∏≠‡∏°‡∏î‡πâ‡∏ß‡∏¢‡πÇ‡∏°‡πÄ‡∏î‡∏•**
        - ‡πÉ‡∏ä‡πâ ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤ (model.predict()) ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ñ‡πà‡∏≤
        - ‡πÅ‡∏õ‡∏•‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏õ‡πá‡∏ô Softmax probabilities
        - ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ ‡πÑ‡∏ö‡πÇ‡∏≠‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
        
        ```python
        predictions = model.predict(image_array)
        probabilities = tf.nn.softmax(predictions[0]).numpy() 

        predicted_class = np.argmax(probabilities)
        confidence = probabilities[predicted_class] * 100
        ```
        **5Ô∏è‚É£ ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÑ‡∏ö‡πÇ‡∏≠‡∏° (Biome Grouping)**
        - ‡∏Å‡∏≥‡∏´‡∏ô‡∏î ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ö‡πÇ‡∏≠‡∏°‡∏ó‡∏µ‡πà‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡πÑ‡∏î‡πâ (class_names)
        - ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÑ‡∏ö‡πÇ‡∏≠‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà ‡πÄ‡∏ä‡πà‡∏ô Ocean, River, Desert, Jungle, Mountain ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏ô
        
        ```python
        biome_groups = {
            "Ocean": ["biome_10", "biome_24", "biome_0", "biome_46", "biome_47", "biome_44", "biome_45", "biome_42", "biome_43", "biome_40", "biome_41"],
            "River": ["biome_7", "biome_11"],
            "Beach": ["biome_16", "biome_25", "biome_26"],
            "Forest": ["biome_4", "biome_18", "biome_132", "biome_27", "biome_28", "biome_155", "biome_156", "biome_29", "biome_157", "biome_193"],
            "Jungle": ["biome_21", "biome_22", "biome_149", "biome_23", "biome_151", "biome_48", "biome_49"],
            "Taiga": ["biome_5", "biome_19", "biome_133", "biome_30", "biome_31", "biome_158", "biome_32", "biome_33", "biome_160", "biome_161"],
            "Mushroom": ["biome_14", "biome_15"],
            "Swamp": ["biome_6", "biome_134", "biome_191"],
            "Savanna": ["biome_35", "biome_36", "biome_163", "biome_164"],
            "Plains": ["biome_1", "biome_129"],
            "Desert": ["biome_2", "biome_17", "biome_130"],
            "Snowy": ["biome_12", "biome_13", "biome_140"],
            "Windswept": ["biome_3", "biome_34", "biome_131", "biome_162", "biome_20"],
            "Badlands": ["biome_37", "biome_39", "biome_167", "biome_38", "biome_166", "biome_165"],
            "Mountain": ["biome_186", "biome_192", "biome_185", "biome_184", "biome_182", "biome_183", "biome_189"],
            "Caves": ["biome_187", "biome_188", "biome_190"],
            "Nether": ["biome_8", "biome_179", "biome_180", "biome_178", "biome_181"],
            "The End": ["biome_9"]
        }
        ```
        **6Ô∏è‚É£ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÑ‡∏ö‡πÇ‡∏≠‡∏°**
        - ‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡πÑ‡∏ö‡πÇ‡∏≠‡∏°‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Å‡∏•‡∏∏‡πà‡∏°
        - ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏ö‡∏µ‡πà‡∏¢‡∏á‡πÄ‡∏ö‡∏ô‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô
        - ‡∏à‡∏±‡∏î‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÑ‡∏ö‡πÇ‡∏≠‡∏°‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
        ```python
        biome_sums = {group: 0 for group in biome_groups}
        biome_details = {group: [] for group in biome_groups}

        sorted_indices = np.argsort(probabilities)[::-1]

        for i in sorted_indices:
            biome_name = class_names[i]
            prob_percent = probabilities[i] * 100

            for group, biomes in biome_groups.items():
                if biome_name in biomes:
                    biome_sums[group] += prob_percent
                    biome_details[group].append(prob_percent)

        biome_stats = {
            group: {
                "Total": round(biome_sums[group], 3),
                "Mean": round(np.mean(values) + np.std(values), 3) if values else 0,
                "Standard Deviation": round(np.std(values), 3) if values else 0
            } for group, values in biome_details.items()
        }

        sorted_biome_stats = dict(sorted(biome_stats.items(), key=lambda x: x[1]["Mean"], reverse=True))
        ```
        **7Ô∏è‚É£ ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå**
        - ‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏ö‡πÇ‡∏≠‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
        - ‡πÉ‡∏ä‡πâ st.write() ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏ô Streamlit
        ```python
        output_lines = []
        for group, stats in sorted_biome_stats.items():
            mean_value = stats["Mean"]
            output_lines.append(f"{group} ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì {mean_value:.3f}%")

        st.write("### üìä ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å Neural Network ‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ö‡πÇ‡∏≠‡∏°: ")
        for i in output_lines:
            st.write(i)
        
        ```
        
        
    """)

elif st.session_state["page"] == "nn_image_analysis":
    st.title("üñºÔ∏è ‡∏Å‡∏≤‡∏£‡πÅ‡∏¢‡∏Å‡πÇ‡∏ö‡πÇ‡∏≠‡∏°‡πÉ‡∏ô Minecraft ‡∏î‡πâ‡∏ß‡∏¢ Neural Network CNN")
    st.write(""" 
             ‡∏Å‡∏£‡∏≤‡∏ü‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏• Neural Network CNN ‡πÅ‡∏¢‡∏Å‡πÇ‡∏ö‡πÇ‡∏≠‡∏°‡πÉ‡∏ô Minecraft ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Dataset ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡πÇ‡∏ö‡πÇ‡∏≠‡∏°‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÅ‡∏¢‡∏Å‡πÇ‡∏ö‡πÇ‡∏≠‡∏°‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
             """)
    st.image("./train.jpg")
    
    uploaded_file = st.file_uploader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û", type=["jpg", "png", "jpeg","webp"])
    
    if uploaded_file is not None:
        image = Image.open(uploaded_file)
        st.image(image, caption="‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î", use_column_width=True)
        @st.cache_resource
        def load_model():
            model = tf.keras.models.load_model("./dataset/minecraft.h5")
            return model
        model = load_model()
        image_array = tf.keras.preprocessing.image.img_to_array(image)
        image_array = tf.expand_dims(image_array, 0) 

        predictions = model.predict(image_array)
        probabilities = tf.nn.softmax(predictions[0]).numpy() 

        predicted_class = np.argmax(probabilities)  
        confidence = probabilities[predicted_class] * 100 
        class_names = ['biome_1', 'biome_10', 'biome_11', 'biome_12', 'biome_129', 'biome_13', 'biome_130', 'biome_131', 'biome_132', 'biome_133', 'biome_156', 'biome_157', 'biome_158', 'biome_16', 'biome_162', 'biome_17', 'biome_18', 'biome_19', 'biome_2', 'biome_21', 'biome_22', 'biome_26', 'biome_27', 'biome_28', 'biome_29', 'biome_3', 'biome_30', 'biome_31', 'biome_32', 'biome_33', 'biome_34', 'biome_35', 'biome_36', 'biome_37', 'biome_38', 'biome_39', 'biome_4', 'biome_45', 'biome_5', 'biome_6', 'biome_7']

        biome_groups = {
            "Ocean": [
                "biome_10", "biome_24", "biome_0", "biome_46", "biome_47", 
                "biome_44", "biome_45", "biome_42", "biome_43", "biome_40", "biome_41"
            ],
            "River": ["biome_7", "biome_11"],
            "Beach": ["biome_16", "biome_25", "biome_26"],
            "Forest": [
                "biome_4", "biome_18", "biome_132", "biome_27", "biome_28", 
                "biome_155", "biome_156", "biome_29", "biome_157", "biome_193"
            ],
            "Jungle": [
                "biome_21", "biome_22", "biome_149", "biome_23", "biome_151", 
                "biome_48", "biome_49"
            ],
            "Taiga": [
                "biome_5", "biome_19", "biome_133", "biome_30", "biome_31", 
                "biome_158", "biome_32", "biome_33", "biome_160", "biome_161"
            ],
            "Mushroom": ["biome_14", "biome_15"],
            "Swamp": ["biome_6", "biome_134", "biome_191"],
            "Savanna": [
                "biome_35", "biome_36", "biome_163", "biome_164"
            ],
            "Plains": ["biome_1", "biome_129"],
            "Desert": ["biome_2", "biome_17", "biome_130"],
            "Snowy": ["biome_12", "biome_13", "biome_140"],
            "Windswept": [
                "biome_3", "biome_34", "biome_131", "biome_162", "biome_20"
            ],
            "Badlands": [
                "biome_37", "biome_39", "biome_167", "biome_38", "biome_166", "biome_165"
            ],
            "Mountain": [
                "biome_186", "biome_192", "biome_185", "biome_184", "biome_182", 
                "biome_183", "biome_189"
            ],
            "Caves": ["biome_187", "biome_188", "biome_190"],
            "Nether": ["biome_8", "biome_179", "biome_180", "biome_178", "biome_181"],
            "The End": ["biome_9"]
        }

        biome_sums = {group: 0 for group in biome_groups}
        biome_percentages = {group: [] for group in biome_groups}
        biome_details = {group: [] for group in biome_groups} 

        sorted_indices = np.argsort(probabilities)[::-1]

        for i in sorted_indices:
            biome_name = class_names[i]
            prob_percent = probabilities[i] * 100

            for group, biomes in biome_groups.items():
                if biome_name in biomes:
                    biome_sums[group] += prob_percent
                    biome_percentages[group].append(f"{biome_name}: {prob_percent:.3f}%")
                    biome_details[group].append(prob_percent) 
        biome_stats = {
            group: {
                "Total": round(biome_sums[group], 3),
                "Mean": round(np.mean(values) + np.std(values), 3) if values else 0,
                "Standard Deviation": round(np.std(values), 3) if values else 0
            } for group, values in biome_details.items()
        }
        sorted_biome_stats = dict(sorted(biome_stats.items(), key=lambda x: x[1]["Mean"], reverse=True))
        output_lines = []
        for group, stats in sorted_biome_stats.items():
            total = stats["Total"]
            mean_value = stats["Mean"]
            std_dev = stats["Standard Deviation"]
            output_lines.append(f"{group} ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì {mean_value:.3f}%")

        st.write("### üìä ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å Neural Network ‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ö‡πÇ‡∏≠‡∏°: ")
        st.write("### ‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ö‡πÇ‡∏≠‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î")
        st.write(output_lines[0])
        st.write("### ‡∏≠‡∏∑‡πà‡∏ô‡πÜ")
        for i in output_lines[1:5]:
            st.write(i)
            

